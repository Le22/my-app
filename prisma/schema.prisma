// schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Pass {
    id        String   @id @default(cuid())
    title     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    tickets   Ticket[]
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String
    key           String    @unique
    role          RoleEnum  @default(User)
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    ticket        Ticket?
}

model Ticket {
    id        String   @id @default(cuid())
    key       String?
    publicKey String?
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique
    pass      Pass     @relation(fields: [passId], references: [id])
    passId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum RoleEnum {
    User
    Admin
}
